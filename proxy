#!/usr/bin/escript

%    +------------------------[ Company Network ]-------------------------+
%    |                                                                    |
%    |   <proxy -connect-left 127.0.0.1:22 -connect-right x.x.x.x:2222>   | <-------------------+
%    |                                |                                   |                     |
%    |                                |                                   |                     |
%    |           +------------+       |                                   |                     |
%    |           | ssh server | <-----+                                   |                     |
%    |           +------------+                                           |                     |
%    |                                                                    |                     |
%    +------------------------[ Company Network ]-------------------------+                     |
%                                                                                               |
%                                                                                               |
%                                                                                               |
%   +----------[ Home ]----------+      +--------------[ Public Network ]---------------+       |
%   |                            |      |                                               |       |
%   |                            |      |                                               |       |
%   | <ssh root@x.x.x.x -p 1222> | ---> | <proxy -listen-left 1222 -listen-right 2222>  | <-----+
%   |                            |      |                                               |
%   |                            |      |                                               |
%   +----------[ Home ]----------+      +--------------[ Public Network ]---------------+

-record(ip_port, {
	ip,
	port
}).

main(Args) when Args == ["help"] orelse Args == ["-help"] orelse Args == ["--help"] orelse Args == ["-h"] orelse Args == ["--h"] orelse Args == ["/?"] ->
	io:format("usage:
        1: ./proxy -listen-left 13306 -listen-right 23306
        2: ./proxy -connect-left 127.0.0.1:3306 -connect-right 127.0.0.1:23306
        3: ./proxy -listen-left 33306 -connect-right 127.0.0.1:3306
    ");

% 这种模式的处理方案: 收到left socket连接后, 去连接right socket; 而后互相转发它俩; 传统正向代理
% ./proxy -listen-left 13306 -connect-right 127.0.0.1:3306
main(["-listen-left", LeftPort, "-connect-right", RightIpPort]) ->
    try
        %spawn(fun() -> observer:start() end),
        do_listen_left_then_connect_right(parse_int(LeftPort), make_ip_port_record(RightIpPort))
    catch
        throw:Err ->
            io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err]);
        exit:Err ->
            io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err]);
        error:Err ->
            case Err of
                {badmatch, {error, eaddrinuse}} ->
                    io:format("~s Error! Address in use: tcp://127.0.0.1:~s~n", [get_yymmddhhmmssmm_str(), LeftPort]);
                _ ->
                    io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err])
            end
    end;

% 这种模式的处理方案: 先连接right socket, 连上后, 等待right socket发来信号, 才去连left socket; 而后互相转发它俩; 实现反向代理的内网发起端
main(["-connect-left", LeftIpPort, "-connect-right", RightIpPort]) ->
    try
        do_connect_right_then_wait_then_connect_left(split_ip_and_port(LeftIpPort), make_ip_port_map(RightIpPort))
    catch
        throw:Err ->
            io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err]);
        exit:Err ->
            io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err]);
        error:Err ->
            io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err])
    end;

% 这种模式的处理方案: right socket 要先被连上, 然后 left socket 再被客户端连接, 然后互相转发它俩;
% ./proxy -listen-left 2222 -listen-right 2223
main(["-listen-left", LeftPort, "-listen-right", RightPort]) ->
    try
        {ok, LeftListenSock} = tcp_listen(parse_int(LeftPort)),
        {ok, RightListenSock} = tcp_listen(parse_int(RightPort)),
        io:format("~s Start proxy listen tcp://127.0.0.1:~s and listen tcp://127.0.0.1:~s~n", [get_yymmddhhmmssmm_str(), LeftPort, RightPort]),
        wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock)
    catch
        throw:Err ->
            io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err]);
        exit:Err ->
            io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err]);
        error:Err ->
            case Err of
                {badmatch, {error, eaddrinuse}} ->
                    io:format("~s Error! Address in use: tcp://127.0.0.1:~s~n", [get_yymmddhhmmssmm_str(), LeftPort]),
                    io:format("~s Error! Address in use: tcp://127.0.0.1:~s~n", [get_yymmddhhmmssmm_str(), RightPort]);
                _ ->
                    io:format("~s Error: ~p~n", [get_yymmddhhmmssmm_str(), Err])
            end
    end;

main(_) ->
	io:format("param error~n").

do_listen_left_then_connect_right(LeftPort, RightIpPortRcd) ->
    {ok, LeftListenSock} = tcp_listen(LeftPort),
    io:format("~s Start proxy tcp://127.0.0.1:~p to tcp://~s:~p~n", [get_yymmddhhmmssmm_str(), LeftPort, RightIpPortRcd#ip_port.ip, RightIpPortRcd#ip_port.port]),
    wait_a_new_left_socket(LeftListenSock, RightIpPortRcd#ip_port.ip, RightIpPortRcd#ip_port.port).

% do_connect_right_then_wait_then_connect_left([LeftIp, LeftPort], #{ip := RightIp, port := RightPort} = RightIpPortMap) ->
do_connect_right_then_wait_then_connect_left([LeftIp, LeftPort], RightIpPortMap) ->
    RightIp = maps:get(ip, RightIpPortMap),
    RightPort = maps:get(port, RightIpPortMap),
    case tcp_connect(RightIp, RightPort) of
        {ok, RightSocket} ->
            io:format("~s Proxy connected on a new right socket: ~p~n", [get_yymmddhhmmssmm_str(), RightSocket]),
            wait_right_socket_initial_signal(RightSocket, {LeftIp, LeftPort}, RightIpPortMap);
        {error, can_not_connect} ->
            io:format("~s Error! Can not connect right socket: tcp://~s:~s~n", [get_yymmddhhmmssmm_str(), RightIp, RightPort]),
            timer:sleep(1000),
            do_connect_right_then_wait_then_connect_left([LeftIp, LeftPort], RightIpPortMap)
    end.

wait_right_socket_initial_signal(RightSocket, {LeftIp, LeftPort}, RightIpPortMap) ->
    receive
        {tcp, RightSocket, <<1:8>>} -> % 收到 1byte 1, 则链接左边
            io:format("~s got <<1:8>> ~p~n", [get_yymmddhhmmssmm_str(), RightSocket]),
            case tcp_connect(LeftIp, LeftPort) of
                {ok, LeftSocket} ->
                    io:format("~s Proxy connected on a new left socket: ~p~n", [get_yymmddhhmmssmm_str(), LeftSocket]),
                    gen_tcp:send(RightSocket, <<1:8>>), % 发送 1byte 1, 通知那头可以开始转发数据
                    bind_left_and_right(LeftSocket, RightSocket),
                    do_connect_right_then_wait_then_connect_left([LeftIp, LeftPort], RightIpPortMap);
                {error, can_not_connect} ->
                    io:format("~s Error! Can not connect left socket: tcp://~s:~p~n", [get_yymmddhhmmssmm_str(), LeftIp, LeftPort]),
                    gen_tcp:send(RightSocket, <<0:8>>), % 发送 1byte 0, 通知那头无法连接
                    wait_right_socket_initial_signal(RightSocket, {LeftIp, LeftPort}, RightIpPortMap)
            end;
        {tcp, RightSocket, <<0:8>>} -> % 收到 1byte 0, 心跳而已, 要不要回?
            %io:format("got <<0:8>> ~p~n", [RightSocket]),
            gen_tcp:send(RightSocket, <<0:8>>), % 发送 1byte 0, 回一下心跳
            wait_right_socket_initial_signal(RightSocket, {LeftIp, LeftPort}, RightIpPortMap);
        {tcp, RightSocket, Bin} ->
            io:format("~s Error! Right socket is not our proxy, ~p got message: ~p~n", [get_yymmddhhmmssmm_str(), RightSocket, Bin]),
            gen_tcp:close(RightSocket),
            timer:sleep(3000),
            do_connect_right_then_wait_then_connect_left([LeftIp, LeftPort], RightIpPortMap);
        {tcp_closed, RightSocket} ->
            io:format("~s Right socket disconnected: ~p~n", [get_yymmddhhmmssmm_str(), RightSocket]),
            gen_tcp:close(RightSocket),
            %timer:sleep(3000),
            do_connect_right_then_wait_then_connect_left([LeftIp, LeftPort], RightIpPortMap)
    after 60000 -> % 每60秒无响应则断开重连
        io:format("~s Close right socket after 60 seconds: ~p~n", [get_yymmddhhmmssmm_str(), RightSocket]),
        gen_tcp:close(RightSocket),
        do_connect_right_then_wait_then_connect_left([LeftIp, LeftPort], RightIpPortMap)
    end.
    
wait_a_new_left_socket(LeftListenSock, RightIp, RightPort) ->
    {ok, LeftSocket} = wait_until_socket_connected(LeftListenSock),
    {ok, {LeftClientIp, LeftClientPort}} = inet:peername(LeftSocket),
    io:format("~s A new left socket connected: ~p ~p:~p~n", [get_yymmddhhmmssmm_str(), LeftSocket, LeftClientIp, LeftClientPort]),
    case tcp_connect(RightIp, RightPort) of
        {ok, RightSocket} ->
            io:format("~s A new right socket connected: ~p~n", [get_yymmddhhmmssmm_str(), RightSocket]),
            bind_left_and_right(LeftSocket, RightSocket);
        {error, can_not_connect} ->
            io:format("~s Error! Can not connect right socket: tcp://~s:~p~n", [get_yymmddhhmmssmm_str(), RightIp, RightPort]),
            io:format("~s Close left socket: ~p~n", [get_yymmddhhmmssmm_str(), LeftSocket]),
            gen_tcp:close(LeftSocket)
    end,
    wait_a_new_left_socket(LeftListenSock, RightIp, RightPort).

wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock) ->
    case wait_until_socket_connected(RightListenSock) of
        {ok, RightSocket} ->
            case inet:peername(RightSocket) of
                {ok, {RightClientIp, RightClientPort}} ->
                    io:format("~s A new right socket connected: ~p ~p:~p~n", [get_yymmddhhmmssmm_str(), RightSocket, RightClientIp, RightClientPort]),
                    wait_left_connected(LeftListenSock, RightListenSock, RightSocket);
                {error, Reason} ->
                    io:format("~s Opps! A right socket leaved! {error, ~p}~n", [get_yymmddhhmmssmm_str(), Reason]),
                    wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock)
            end;
        O ->
            io:format("~s Opps! A right socket leaved! ~p~n", [get_yymmddhhmmssmm_str(), O]),
            wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock)
    end.

wait_left_connected(LeftListenSock, RightListenSock, RightSocket) ->
    case wait_until_socket_connected(LeftListenSock, 5000) of
        {error, timeout} ->
            gen_tcp:send(RightSocket, <<0:8>>), % 发送 1byte 0, 心跳那头
            receive
                {tcp, RightSocket, <<0:8>>} -> % 收到 1byte 0, 心跳的回复
                    wait_left_connected(LeftListenSock, RightListenSock, RightSocket);
                {tcp_closed, RightSocket} ->
                    io:format("~s Error! Right socket closed! ~p ~n", [get_yymmddhhmmssmm_str(), RightSocket]),
                    gen_tcp:close(RightSocket),
                    c:flush(),
                    wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock)
            after 3000 ->
                io:format("~s Heartbeat Error! Right socket not response! ~p ~n", [get_yymmddhhmmssmm_str(), RightSocket]),
                gen_tcp:close(RightSocket),
                c:flush(),
                wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock)
            end;
        {ok, LeftSocket} ->
            case inet:peername(LeftSocket) of
                {ok, {LeftClientIp, LeftClientPort}} ->
                    io:format("~s A new left socket connected: ~p ~p:~p~n", [get_yymmddhhmmssmm_str(), LeftSocket, LeftClientIp, LeftClientPort]),
                    gen_tcp:send(RightSocket, <<1:8>>), % 发送 1byte 1, 通知那头可以开始连left
                    receive
                        {tcp, RightSocket, <<0:8>>} -> % 收到 1byte 0, 那头无法连接左边, 我也断开左边
                            % io:format("got <<0:8>> ~p~n", [RightSocket]),
                            gen_tcp:close(LeftSocket),
                            wait_left_connected(LeftListenSock, RightListenSock, RightSocket);
                        {tcp, RightSocket, <<1:8>>} -> % 收到 1byte 1, 可以开始转发数据
                            bind_left_and_right(LeftSocket, RightSocket),
                            c:flush(),
                            wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock)
                    after 5000 ->
                        io:format("~s Error! Right socket not response! Maybe Change left and right! ~p ~n", [get_yymmddhhmmssmm_str(), RightSocket]),
                        gen_tcp:close(LeftSocket),
                        gen_tcp:close(RightSocket),
                        c:flush(),
                        wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock)
                    end;
                {error, Reason} ->
                    io:format("~s Opps! A left socket leaved! {error, ~p}~n", [get_yymmddhhmmssmm_str(), Reason]),
                    gen_tcp:close(RightSocket),
                    c:flush(),
                    wait_right_connected_then_wait_left_connected(LeftListenSock, RightListenSock)
            end
    end.

bind_left_and_right(LeftSocket, RightSocket) ->
    Pid = spawn_link(fun() -> loop(LeftSocket, RightSocket) end),
    gen_tcp:controlling_process(LeftSocket, Pid),
    gen_tcp:controlling_process(RightSocket, Pid),
    io:format("~s Success! Now proxy two sockets! ~p <-> ~p ~n", [get_yymmddhhmmssmm_str(), LeftSocket, RightSocket]).

loop(LeftSocket, RightSocket) ->
    receive
        {tcp, LeftSocket, Bin} ->
            io:format("~s ~p -----> ~p bytes~n", [get_yymmddhhmmssmm_str(), LeftSocket, size(Bin)]),
            %gen_tcp:send(LeftSocket, <<"yoyo~", Bin/big-binary>>),
            case gen_tcp:send(RightSocket, Bin) of
                ok ->
                    loop(LeftSocket, RightSocket);
                {error, Reason} ->
                    io:format("~s                   {error, ~p} <----- ~p~n", [get_yymmddhhmmssmm_str(), Reason, RightSocket]),
                    gen_tcp:close(LeftSocket)
            end;
        {tcp, RightSocket, Bin} ->
            io:format("~s                   ~p bytes <----- ~p~n", [get_yymmddhhmmssmm_str(), size(Bin), RightSocket]),
            case gen_tcp:send(LeftSocket, Bin) of
                ok ->
                    loop(LeftSocket, RightSocket);
                {error, Reason} ->
                    io:format("~s ~p -----> {error, ~p}~n", [get_yymmddhhmmssmm_str(), LeftSocket, Reason]),
                    gen_tcp:close(RightSocket)
            end;
        {tcp_closed, LeftSocket} ->
            io:format("~s ~p -----> disconnect -----> ~p~n", [get_yymmddhhmmssmm_str(), LeftSocket, RightSocket]),
            gen_tcp:close(RightSocket);
        {tcp_closed, RightSocket} ->
            io:format("~s ~p <----- disconnect <----- ~p~n", [get_yymmddhhmmssmm_str(), LeftSocket, RightSocket]),
            gen_tcp:close(LeftSocket)
    end.

split_ip_and_port(IpPort) -> % 127.0.0.1:3306
    [
        string:substr(IpPort, 1, string:rstr(IpPort, ":") - 1), % 127.0.0.1
        parse_int(string:substr(IpPort, string:rstr(IpPort, ":") + 1)) % 3306
    ].

make_ip_port_record(IpPort) -> % 127.0.0.1:3306
    #ip_port{
        ip = string:substr(IpPort, 1, string:rstr(IpPort, ":") - 1), % 127.0.0.1
        port = parse_int(string:substr(IpPort, string:rstr(IpPort, ":") + 1)) % 3306
    }.

make_ip_port_map(IpPort) -> % 127.0.0.1:3306
    #{
        ip => string:substr(IpPort, 1, string:rstr(IpPort, ":") - 1), % 127.0.0.1
        port => parse_int(string:substr(IpPort, string:rstr(IpPort, ":") + 1)) % 3306
    }.
    
parse_int(String) ->
    erlang:list_to_integer(String).
    
wait_until_socket_connected(Listen) ->
    gen_tcp:accept(Listen).
    
wait_until_socket_connected(Listen, Timeout) ->
    gen_tcp:accept(Listen, Timeout).

tcp_listen(Port) ->
    gen_tcp:listen(Port, [binary, {packet, 0}, {reuseaddr, true}, {active, true}]).
    
tcp_connect(Ip, Port) ->
    tcp_connect(Ip, Port, 1).

tcp_connect(_, _, Count) when Count > 2 ->
    {error, can_not_connect};
tcp_connect(Ip, Port, Count) ->
    case gen_tcp:connect(Ip, Port, [binary, {packet, 0}]) of
        {ok, Socket} ->
            {ok, Socket};
        _ ->
            timer:sleep(1000),
            tcp_connect(Ip, Port, Count + 1)
    end.

get_yymmddhhmmssmm_str() ->
    NowMillisecond = erlang:system_time(millisecond), % 1610803593978
    A = NowMillisecond div 1000000000, % 1610
    B = (NowMillisecond div 1000) rem (A * 1000000), % 803593
    C = (NowMillisecond rem ((NowMillisecond div 1000) * 1000)), % 978
	{{Year, Month, Day}, {Hour, Minute, Second}} = calendar:now_to_local_time({A, B, C}),
	lists:flatten(io_lib:format("~4..0w-~2..0w-~2..0w ~2..0w:~2..0w:~2..0w.~3..0w", [Year, Month, Day, Hour, Minute, Second, C])).  % "2021-01-16 21:35:15.321"


% ssh -f -N -T -R 2222:localhost:22 sourceuser@138.47.99.99

    %-f: tells the SSH to background itself after it authenticates, saving you time by not having to run something on the remote server for the tunnel to remain alive.
    
    %-N: if all you need is to create a tunnel without running any remote commands then include this option to save resources.
    
    %-T: useful to disable pseudo-tty allocation, which is fitting if you are not trying to create an interactive shell.
    
    %autossh utility,

% ssh localhost -p 2222




